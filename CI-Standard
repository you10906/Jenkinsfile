timestamps 
{
    //执行节点，默认使用dev节点
    NODE_LABLE = 'dev' 

    node(NODE_LABLE) 
    {
        //构建前的准备工作
        //1、清理工作空间
        cleanWs()
        
        /*
        //2、触发构建的用户
        wrap([$class: 'BuildUser']) 
        {
            def user = env.BUILD_USER_ID
            echo 'build user is ' + user
        }*/

        //2、定义全局变量
        setGlobalParams()

        //3、设置个性化构建名字，用以区分每次构建对应的项目
        currentBuild.displayName = "#" + BUILD_ID + " " + imageName

        stage('下载代码') 
        {
            try
            {
                checkout()
            }
            catch(Exception ex)
            { 
                //发送构建失败邮件
                sendEmail("1")
                echo "下载代码失败!!!"
                echo "First build failed, let's retry if accepted"
                retry(2) 
                {
                    input "重新下载代码?"
                    checkout()
                }

            }       
        }

        //如果是由gitlab触发的构建，则读取项目根目录下的ci.yaml文件，如果没有该文件则跳过后续所有步骤，结束任务
        if ( env.gitlabSourceRepoSshUrl && !fileExists('ci.yaml'))
        {
            echo '项目根目录下没有ci.yaml文件，无法执行后续构建步骤，结束任务。'
            return
        }
        else if ( env.gitlabSourceRepoSshUrl )
        {
            try
            {
                def ci = readYaml file: 'ci.yaml'

                projectType = ci.projectType
                if (!ci.projectType)
                {
                    error 'ci.yaml文件没有设置projectType，结束构建任务。请根据项目类型设置projectType的值，当前的可选取值有：maven、nodejs、nuxt'
                }

                //优先取配置文件中设置的镜像名，否则以项目名作为镜像名
                if ( ci.build && ci.build.imageName )
                {
                    imageName = ci.build.imageName
                }

                environmentName = ci.deployment.environmentName
                serviceName = ci.deployment.serviceName
                testCaseName = ci.test.caseName
                testEnvUrl = ci.test.url

                if (ci.codeAnalysis)
                {
                    codeAnalysis = 'true'
                }
                else
                {
                    codeAnalysis = 'false'
                }
            }
            catch(Exception ex)
            {
                error '读取ci.yaml失败，请检查ci.yaml格式是否正确！！！' + ex
            }
        }

        //如果设置了运行环境名称和服务名称，则用本次构建的镜像自动升级指定的应用
        if ( environmentName && serviceName )
        {
            upgradeFlag = 'true'
        }

        //如果设置了测试环境地址和测试工程名称，则执行自动化测试
        if ( testCaseName && testEnvUrl)
        {
            autoTest = 'true'
        }

        stage('打包编译') 
        {
            try
            {
                compile()
            }
            catch(Exception ex)
            { 
                //发送构建失败邮件
                sendEmail("2")
                echo "Failed to build and complie!!!"
                echo "First build failed, let's retry if accepted"
                retry(2) 
                {
                    input "重新打包编译?"
                    compile()
                }
            }
        }

        stage('构建镜像') 
        {
            try
            {
                buildImage()
            }
            catch(Exception ex)
            { 
                //发送构建失败邮件
                sendEmail("3")
                echo "Failed to build image!!!"
                retry(2) 
                {
                    input "重新构建镜像?"
                    buildImage()
                }
            }
        
        }
      
        stage('升级应用') 
        {  
            try
            {
                upgrade()
            }
            catch(Exception ex)
            { 
                //发送构建失败邮件
                sendEmail("4")
                echo "Failed to upgrade deployment!!!"
                retry(2) 
                {
                    input "重新升级应用?"
                    upgrade()
                }
            }
        }

        stage('自动化测试')
        {
            try
            {
                //拉起自动化测试任务，具体任务及参数待确认
                //build job: 'test-project', parameters: [string(name: 'inputContent', value: params)]
            }
            catch(Exception ex)
            {
                //发送构建失败邮件
                sendEmail("7")
                error "执行自动化用例失败"
            }
        }

        stage('质量分析') 
        {
            try
            {
                sonarCheck()

            }
            catch(Exception ex)
            { 
                //发送构建失败邮件
                sendEmail("5")
                echo "Failed to execute code ayalysis!!!"
                retry(2) 
                {
                    input "重新质量分析?"
                    sonarCheck()
                }
            }
        }
        
        //发送构建成功邮件
        sendEmail("6")

    }
}

def checkout()
{
    //pull git project
    if (branch)
    {
        git branch: branch, credentialsId: '9456db80-36f7-4a2b-b0df-c2eb93f00671', url: gitUrl
    }
    else
    {
        //如果入参没有传分支参数，默认取develop分支
        git branch: 'develop', credentialsId: '9456db80-36f7-4a2b-b0df-c2eb93f00671', url: gitUrl             
    }
}

def compile()
{
    //后端工程用maven打包，前端工程用nodejs打包
    if ('maven' == projectType)
    {
        
        //执行maven命令
        sh "mvn -B clean install -DskipTests=true -f ${WORKSPACE}/pom.xml"               
    }
    else if ('nodejs' == projectType)
    { 
        sh "docker run  --privileged --rm -w /home/work -v ${WORKSPACE}:/home/work ${WEBPACK_IMAGE} sh -c \'npm install && npm run build\'"
        /*
        docker.image("${WEBPACK_IMAGE}").inside("--privileged -w /home/work -v ${WORKSPACE}:/home/work") 
        {
            sh 'npm install && npm run build'
        }
        */

    }
}

def buildImage()
{  
    echo "build docker iamge and push to harbor registry"
    
    JAR_NAME = "${imageName}.jar"

    //在当前workspace新建一个目录用于制作镜像
    sh "mkdir ${IMAGE_DIR}"

    //如果项目中没有dockerfile，则使用默认dockerfile
    if (!fileExists('Dockerfile'))
    {
        echo "Dockerfile doesn't exist"

        if ('maven' == projectType)
        {
            sh "cp ${BACKEND_DOCKERFILE} ${WORKSPACE}/${IMAGE_DIR}/Dockerfile"
        }
        else if ('nodejs' == projectType)
        {
            sh "cp ${FRONTEND_DOCKERFILE} ${WORKSPACE}/${IMAGE_DIR}/Dockerfile"
        }
         
    }
    else
    { 
         echo "Dockerfile exist"
         sh "cp ${WORKSPACE}/Dockerfile ${WORKSPACE}/${IMAGE_DIR}/Dockerfile"
    }
    
    if ('maven' == projectType)
    {
        echo "build maven project image"
        //将编译出的jar包复制到镜像制作目录
        sh "cp ./target/*.jar ./${IMAGE_DIR}/${JAR_NAME}"

        customImage = docker.build("${IMAGE_URI}:${BUILD_ID}", "--build-arg JAR_NAME=${JAR_NAME} -f ${WORKSPACE}/${IMAGE_DIR}/Dockerfile ${WORKSPACE}/${IMAGE_DIR}")
        //sh "docker build -t ${IMAGE_URI}:${BUILD_ID} --build-arg JAR_NAME=${JAR_NAME} -f  ${WORKSPACE}/${IMAGE_DIR}/Dockerfile ${WORKSPACE}/${IMAGE_DIR}"
    }
    else if ('nodejs' == projectType)
    {
        echo "build nodejs project image"
        
        //将webpack打包生成的文件夹复制到镜像制作目录
        sh "cp -r ./dist ./${IMAGE_DIR}"

        customImage = docker.build("${IMAGE_URI}:${BUILD_ID}", "-f ${WORKSPACE}/${IMAGE_DIR}/Dockerfile ${WORKSPACE}/${IMAGE_DIR}")
        //sh "docker build -t ${IMAGE_URI}:${BUILD_ID} -f  ${WORKSPACE}/${IMAGE_DIR}/Dockerfile ${WORKSPACE}/${IMAGE_DIR}"
    }
    
    
    docker.withRegistry("http://${REGISTRY_HOST}", 'docker_auth_dev') 
    {
        //docker.withRegistry有时候登录失败，这里再登录一次，双保险
        sh "docker login -u dev -p Zlst8888 192.168.10.238"

        //推送镜像仓库
        customImage.push()
        customImage.push('latest')

        //删除本地镜像, docker pipeline plugin目前未提供删除镜像的接口，因此这里通过shell脚本删除本地镜像
        sh "docker rmi ${IMAGE_URI}:latest"
        sh "docker rmi ${IMAGE_URI}:${BUILD_ID}"  
    }
}

def upgrade()
{
    if ( 'true' == upgradeFlag)
    {
        echo "Need to upgrade deployment"
        def map = new HashMap()
        map.nodeLable = NODE_LABLE
        map.environmentName = environmentName
        map.serviceName = serviceName
        map.imageUrl = "${IMAGE_URI}:${BUILD_ID}"
        map.ccapiUrl = "http://ccapi2.cs2025.cn"
         
        def params = new groovy.json.JsonBuilder(map).toString();
        build job: 'CI-Upgrade-Service', parameters: [string(name: 'inputContent', value: params)]
    }
    else
    {
        echo "Don't upgrade deployment, skip this stage."
    }
}

def sonarCheck()
{
    if ( 'true' == codeAnalysis)
    {
        echo "Start to SoanrQube Analysis."
        def scannerHome = tool 'sonar-scanner';
        withSonarQubeEnv('sonarqube') 
        {
            sh "${scannerHome}/bin/sonar-scanner"
        }
    }
    else
    {
        echo "Don't execute code analysis, skip this stage."
    }
}

//参数emailType
//1: 下载代码失败
//2：打包编译失败
//3：构建镜像失败
//4：升级应用失败
//5: 质量分析失败
//6: 构建成功
def sendEmail(emailType)
{
    //TODO 暂时不发邮件
    return;
    echo "Start to send email."
    
    //jenkins构建日志地址
    CONSOLE_URL = BUILD_URL + "console" 

    SUBJECT= ""
    BUILD_RESULT = ""

    if (emailType == '1')
    {
        //下载代码失败
        SUBJECT = "【严重】 ${imageName}构建失败"
        BUILD_RESULT = "下载代码失败"
    }
    else if (emailType == '2')
    {
        //打包编译失败
        SUBJECT = "【严重】 ${imageName}构建失败"
        BUILD_RESULT = "打包编译失败"
    }
    else if (emailType == '3')
    {
        //构建镜像失败
        SUBJECT = "【严重】 ${imageName}构建失败"
        BUILD_RESULT = "构建镜像失败"
    }
    else if (emailType == '4')
    {
        //升级应用失败
        SUBJECT = "【严重】 ${imageName}构建失败"
        BUILD_RESULT = "升级应用失败"
    }
    else if (emailType == '5')
    {
        //质量分析失败
        SUBJECT = "【重要】 ${imageName}构建失败"
        BUILD_RESULT = "质量检查失败"
    }
    else if (emailType == '6')
    {
        //CI构建成功
        SUBJECT = "【请知】 ${imageName}构建成功"
        BUILD_RESULT = "成功"
    }

    EMAILEXT_BODY = "(本邮件由CI构建自动发送，请勿回复！)<br/><hr/>项目名称：${imageName}<br/><br/>分支名称：${branch}<br/><br/>CI构建结果：${BUILD_RESULT}<br/><br/>CI构建日志地址：<a href=${CONSOLE_URL}>${CONSOLE_URL}</a><br/>"

    RECEIVER = "cc:renyou@chalco-steering.com, cc:qinlu@chalco-steering.com"

    emailext body:  "${EMAILEXT_BODY}", subject: "${SUBJECT}",  to: "${RECEIVER}"
}

//参数处理
def setGlobalParams()
{
    echo "Set global parameters"
    setVariables()
    setConstants()     
}

def setVariables()
{
    //默认不执行升级与自动化测试
    upgradeFlag = 'true'
    autoTest = 'false'

    if (GIT_URL)
    {
        gitUrl = GIT_URL
        branch = BRANCH_NAME
        imageName = IMAGE_NAME
        projectType = PROJECT_TYPE
        environmentName = ENVIRONMENT_NAME
        serviceName = SERVICE_NAME
        testCaseName = TEST_CASE_NAME
        testEnvUrl = TEST_ENVIRONMENT_URL
        codeAnalysis = CODE_ANALYSIS
    }
    else
    {   
        gitUrl = env.gitlabSourceRepoSshUrl
        branch = env.gitlabTargetBranch
        userEmail = env.gitlabUserEmail
        imageName = env.gitlabSourceRepoName
    }
}

def setConstants()
{
    REGISTRY_HOST = '192.168.10.238'
    REGISTRY_PROJECT = 'dev'
    BASE_DIR = "/home/jenkins/deploy"

    //镜像制作地址，在workspace新建该目录，用于制作镜像
    IMAGE_DIR = 'image'

    IMAGE_URI = "${REGISTRY_HOST}/${REGISTRY_PROJECT}/${imageName}"
 
    //前后端Dockerfile, 当源码中没有Dockerfile时，使用如下Dockerfile
    BACKEND_DOCKERFILE = "${BASE_DIR}/common/base_java_run_image"
    FRONTEND_DOCKERFILE = "${BASE_DIR}/common/base_node_run_image"
   
    //前端项目执行npm命令的镜像
    WEBPACK_IMAGE = "${REGISTRY_HOST}/base/base_webpack_image:1.0"
}